#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Deep Convolutional GANs

# Importing the libraries
from __future__ import print_function
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.optim as optim
import torch.utils.data
import torchvision.datasets as dset
import torchvision.transforms as transforms
import torchvision.utils as vutils
from torch.autograd import Variable

# Setting some hyperparameters
batchSize = 64 # We set the size of the batch.
imageSize = 64 # We set the size of the generated images (64x64).

# Creating the transformations
transform = transforms.Compose([transforms.Scale(imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),]) # We create a list of transformations (scaling, tensor conversion, normalization) to apply to the input images.

# Loading the dataset
dataset = dset.ImageFolder(root = 'data/beach/', transform = transform) # We download the training set in the ./data folder and we apply the previous transformations on each image.
dataloader = torch.utils.data.DataLoader(dataset, batch_size = batchSize, shuffle = True) # We use dataLoader to get the images of the training set batch by batch.

# Defining the weights_init function that takes as input a neural network m and that will initialize all its weights.
def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv') != -1:
        m.weight.data.normal_(0.0, 0.02)
    elif classname.find('BatchNorm') != -1:
        m.weight.data.normal_(1.0, 0.02)
        m.bias.data.fill_(0)

# defining the generator
        
class G(nn.Module):
    
    def __init__(self):
        super(G, self).__init__()
        self.main = nn.Sequential(
                nn.ConvTranspose2d(100, 512, 4, 1, 0, bias=False),
                nn.BatchNorm2d(512),
                nn.ReLU(True),
                nn.ConvTranspose2d(512, 256, 4, 2, 1, bias=False),
                nn.BatchNorm2d(256),
                nn.ReLU(True),
                nn.ConvTranspose2d(256, 128, 4, 2, 1, bias=False),
                nn.BatchNorm2d(128),
                nn.ReLU(True),
                nn.ConvTranspose2d(128, 64, 4, 2, 1, bias=False),
                nn.BatchNorm2d(64),
                nn.ReLU(True),
                nn.ConvTranspose2d(64, 3, 4, 2, 1, bias=False),
                nn.Tanh()
            )

    def forward(self, input):
        output = self.main(input)
        return output

# creating the generator
generator = G()
generator.apply(weights_init)    
    
    
# defining the discriminator

class D(nn.Module):
    
    def __init__(self):
        super(D, self).__init__()
        self.main = nn.Sequential(
                nn.Conv2d(3, 64, 4, 2, 1, bias=False),
                nn.LeakyReLU(0.2, inplace=True),
                nn.Conv2d(64, 128, 4, 2, 1, bias=False),
                nn.BatchNorm2d(128),
                nn.LeakyReLU(0.2, inplace=True),
                nn.Conv2d(128, 256, 4, 2, 1, bias=False),
                nn.BatchNorm2d(256),
                nn.LeakyReLU(0.2, inplace=True),
                nn.Conv2d(256, 512, 4, 2, 1, bias=False),
                nn.BatchNorm2d(512),
                nn.LeakyReLU(0.2, inplace=True),
                nn.Conv2d(512, 1, 4, 1, 0, bias=False),
                nn.Sigmoid()
            )
    def forward(self, input):
        output = self.main(input)
        return output.view(-1) # .view(-1) flattens the result
 
# create the discriminator
discriminator = D()
discriminator.apply(weights_init)
   


# Training the DCGAN

loss = nn.BCELoss()
optimizer_D = optim.Adam(discriminator.parameters(), lr=0.0002, betas = (0.5, 0.999))
optimizer_G = optim.Adam(generator.parameters(), lr=0.0002, betas = (0.5, 0.999))

for epoch in range(25):
    for i, data in enumerate(dataloader, 0):
        
        # Step 1: Udating the weights of the NN of the D
        discriminator.zero_grad()
        
        # Training the D with a real image of the dataset
        real, _ = data
        input = Variable(real)
        target = Variable(torch.ones(input.size()[0]))
        output = discriminator(input)
        errorD_real = loss(output, target)
        
        # Training the D with the fake image generated by the G
        noise = Variable(torch.randn(input.size()[0], 100, 1, 1)) # batchsize, input vector, size 1 by 1
        fake = generator(noise)
        target = Variable(torch.zeros(input.size()[0]))
        output = discriminator(fake.detach())
        errorD_fake = loss(output, target)
        
        # Backpropagation
        errorD = errorD_real + errorD_fake
        errorD.backward()
        optimizerD.step()


        # Step 2: Updating the weights of the NN of the G
        generator.zero_grad()
        target = Variable(torch.ones(input.size()[0]))
        output = discriminator(fake)
        errorG = loss(output, target)
        errorG.backward()
        optimizerG.step()
        
        # Step 3: Printing the losses and saving real images and generated images
        
        print('[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f' % (epoch, 25, i, len(dataloader), errorD.data[0], errorG.data[0]))
        if i % 100 == 0:
            vutils.save_image(real, '%s/real_samples.png' % './results', normalize=True)
            fake = generator(noise)
            vutils.save_image(fake.data, '%s/fake_samples_epoch_%03d.png' % ('./results', epoch), normalize = True)

